name: build-openppp2-binary # 发布二进制文件

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: '输入发布的 tag 名称'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        platform: 
          - linux/amd64
          - linux/aarch64

    runs-on: ${{ matrix.os }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      BOOST_VERSION: 1.86.0
      JEMALLOC_VERSION: 5.3.0
      OPENSSL_VERSION: 3.4.0

    steps:
    - name: Checkout openppp2 repository
      uses: actions/checkout@v4
      with:
        repository: liulilittle/openppp2
        path: openppp2
        ref: main

    - name: Set THIRD_PARTY_LIBRARY_DIR environment variables
      run: |
        echo "THIRD_PARTY_LIBRARY_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Replace THIRD_PARTY_LIBRARY_DIR in CMakeLists.txt
      run: |
        cd openppp2
        sed -i 's|SET(THIRD_PARTY_LIBRARY_DIR /root/dev)|SET(THIRD_PARTY_LIBRARY_DIR $ENV{THIRD_PARTY_LIBRARY_DIR})|' CMakeLists.txt

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake build-essential ca-certificates \
          clang cmake curl g++ gcc gdb git libicu-dev \
          libkrb5-dev libssl-dev libunwind8 net-tools \
          openssl unzip zip

    - name: Build boost
      run: |
        BOOST_VERSION_UNDERSCORE=$(echo ${{ env.BOOST_VERSION }} | sed 's/\./_/g')
        wget https://archives.boost.io/release/${{ env.BOOST_VERSION }}/source/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2
        tar jxvf boost*.tar.bz2
        rm -rf boost*.tar.bz2
        mv boost* boost
        cd boost
        ./bootstrap.sh
        ./b2 cxxflags=-fPIC

    - name: Build jemalloc
      run: |
        wget https://github.com/jemalloc/jemalloc/releases/download/${{ env.JEMALLOC_VERSION }}/jemalloc-${{ env.JEMALLOC_VERSION }}.tar.bz2
        tar jxvf jemalloc*.tar.bz2
        rm -rf jemalloc*.tar.bz2
        mv jemalloc* jemalloc
        cd jemalloc
        ./autogen.sh --with-jemalloc-prefix=je_
        make -j $(nproc)

    - name: Build openssl
      run: |
        wget https://github.com/openssl/openssl/releases/download/openssl-${{ env.OPENSSL_VERSION }}/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
        tar zxvf openssl*.tar.gz
        rm -rf openssl*.tar.gz
        mv openssl* openssl
        cd openssl
        ./Configure
        make -j $(nproc)

    - name: Build openppp2
      run: |
        cd openppp2
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j $(nproc)

    - name: Zip and list the built files
      run: |
        ARCH=${{ matrix.arch }}
        PLATFORM=linux-${ARCH}
        cd openppp2/bin
        ARTIFACT_NAME=openppp2-${PLATFORM}.zip
        zip -r $ARTIFACT_NAME ppp
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

    - name: Archive openppp2
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: openppp2/bin/${{ env.ARTIFACT_NAME }}

    - name: Set build time
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Create GitHub Release with Build Time
      uses: softprops/action-gh-release@v2
      with:
        files: ./openppp2/bin/*
        tag_name: ${{ github.event.inputs.tag_name }}
        body: "Build time: ${{ env.BUILD_TIME }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}