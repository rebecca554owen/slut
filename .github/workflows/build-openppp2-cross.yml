name: build-openppp2-cross

on:
  workflow_dispatch:
    inputs:
      tag:
        description: '输入发布的 tag 名称'
        required: true
        default: 'v0.1.2'
  push:
    tags:
      - 'v0.*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        platform: 
          - linux/amd64
          - linux/aarch64
          - linux/armv7l
          - linux/ppc64el
          - linux/s390x
          - linux/riscv64
          - linux/mipsel
        io_uring: [true, false]
        include:
          - platform: linux/amd64
            platform_name: linux-amd64
          - platform: linux/aarch64
            platform_name: linux-aarch64
          - platform: linux/armv7l
            platform_name: linux-armv7l
          - platform: linux/ppc64el
            platform_name: linux-ppc64el
          - platform: linux/s390x
            platform_name: linux-s390x
          - platform: linux/riscv64
            platform_name: linux-riscv64
          - platform: linux/mipsel
            platform_name: linux-mipsel
        exclude:
          - platform: linux/armv7l
            io_uring: true
          - platform: linux/ppc64el
            io_uring: true
          - platform: linux/s390x
            io_uring: true
          - platform: linux/riscv64
            io_uring: true
          - platform: linux/mipsel
            io_uring: true

    runs-on: ${{ matrix.os }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - name: Checkout openppp2
      uses: actions/checkout@v4
      with:
        repository: liulilittle/openppp2
        path: openppp2
        ref: main

    - name: Get release tag
      id: get-tag
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Validate inputs
      run: |
        # 验证tag格式
        if [[ ! "${{ steps.get-tag.outputs.tag }}" =~ ^v0\.[0-9]+\.[0-9]+$ ]]; then
          echo "错误：标签格式无效，应为v0.x.x"
          exit 1
        fi

        PLATFORM=${{ matrix.platform_name }}
        if [[ -z "${PLATFORM}" ]]; then
          echo "错误：平台参数为空"
          exit 1
        fi

        if ${{ matrix.io_uring }}; then
          ARTIFACT_NAME=openppp2-${PLATFORM}-io-uring.zip
        else
          ARTIFACT_NAME=openppp2-${PLATFORM}.zip
        fi
        echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV

    - name: Checkout 3rd party libraries
      uses: actions/checkout@v4
      with:
        repository: liulilittle/openppp2-ubuntu-3rd-environment
        path: 3rd
        fetch-depth: 1

    - name: Set THIRD_PARTY_LIBRARY_DIR
      run: |
        case ${{ matrix.platform }} in
          linux/amd64)    dir=amd64 ;;
          linux/aarch64)  dir=aarch64 ;;
          linux/armv7l)   dir=armv7l ;;
          linux/ppc64el)  dir=ppc64el ;;
          linux/s390x)    dir=s390x ;;
          linux/riscv64)  dir=riscv64 ;;
          linux/mipsel)   dir=mipsel ;;
          *) 
            echo "不支持的平台: ${{ matrix.platform }}"
            exit 1
            ;;
        esac
        echo "THIRD_PARTY_LIBRARY_DIR=${GITHUB_WORKSPACE}/3rd/${dir}" >> $GITHUB_ENV

    - name: Setup cross-compilation toolchain
      run: |
        case ${{ matrix.platform }} in
          linux/amd64)
            sudo apt-get install -y gcc g++
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
            echo "LD=ld" >> $GITHUB_ENV
            ;;

          linux/aarch64)
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
            echo "LD=aarch64-linux-gnu-ld" >> $GITHUB_ENV
            ;;

          linux/armv7l)
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "CXX=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
            echo "LD=arm-linux-gnueabihf-ld" >> $GITHUB_ENV
            ;;

          linux/ppc64el)
            sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
            echo "CC=powerpc64le-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=powerpc64le-linux-gnu-g++" >> $GITHUB_ENV
            echo "LD=powerpc64le-linux-gnu-ld" >> $GITHUB_ENV
            ;;

          linux/s390x)
            sudo apt-get install -y gcc-s390x-linux-gnu g++-s390x-linux-gnu
            echo "CC=s390x-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=s390x-linux-gnu-g++" >> $GITHUB_ENV
            echo "LD=s390x-linux-gnu-ld" >> $GITHUB_ENV
            ;;

          linux/riscv64)
            sudo apt-get install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu
            echo "CC=riscv64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=riscv64-linux-gnu-g++" >> $GITHUB_ENV
            echo "LD=riscv64-linux-gnu-ld" >> $GITHUB_ENV
            ;;

          linux/mipsel)
            sudo apt-get install -y gcc-mipsel-linux-gnu g++-mipsel-linux-gnu
            echo "CC=mipsel-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=mipsel-linux-gnu-g++" >> $GITHUB_ENV
            echo "LD=mipsel-linux-gnu-ld" >> $GITHUB_ENV
            ;;

          *)
            echo "不支持的平台: ${{ matrix.platform }}"
            exit 1
            ;;
        esac

    - name: Configure build environment
      run: |
        cd openppp2
        # 更新第三方库路径
        sed -i "s|SET(THIRD_PARTY_LIBRARY_DIR /root/dev)|SET(THIRD_PARTY_LIBRARY_DIR ${{ env.THIRD_PARTY_LIBRARY_DIR }})|" CMakeLists.txt

        # 条件启用IO_URING
        if ${{ matrix.io_uring }}; then
          sed -i 's|#add_definitions(-DBOOST_ASIO_HAS_IO_URING)|add_definitions(-DBOOST_ASIO_HAS_IO_URING)|' CMakeLists.txt
        fi

    - name: Install base dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libicu-dev \
          libssl-dev \
          libunwind8 \
          zlib1g-dev

        if ${{ matrix.io_uring }}; then
          sudo apt-get install -y liburing-dev
        fi

    - name: Build project
      run: |
        cd openppp2
        mkdir -p build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
          -DCMAKE_LINKER=${{ env.LD }} \
          -DBOOST_ASIO_HAS_IO_URING=${{ matrix.io_uring && 'ON' || 'OFF' }}
        make -j $(nproc)

    - name: Package artifact
      run: |
        cd openppp2/bin
        zip -r ${{ env.ARTIFACT_NAME }} ppp

    - name: Record build time
      run: |
        echo "BUILD_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: openppp2/bin/${{ env.ARTIFACT_NAME }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: openppp2/bin/*.zip
        tag_name: ${{ steps.get-tag.outputs.tag }}
        body: "Release: ${{ env.BUILD_TIME }}"
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
